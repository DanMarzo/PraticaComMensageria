server:
  port: ${PORT:8081}

spring:
  main:
    allow-circular-references: true
    #Permite um Bean de um servico interno do proprio Spring, pois vamos usar bean do spring
    #pesquisar
    allow-bean-definition-overriding: true
  application:
    name: ProductAPI
  datasource:
    driver-class-name: org.postgresql.Driver
    url: jdbc:postgresql://localhost:5433/produto-db
    username: postgres
    password: postgres
    initialization-mode: true
    continue-on-error: true
    platform: postgresql
    maxActive: 3
  jpa:
    hibernate:
#      Toda vez que aplicacao inicializar ele ira apagar o banco e criar novamente
      ddl-auto: create-drop
      format_sql: true
    show_sql: true
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
  rabbitmq:
    host: ${RABBIT_MQ_HOST:localhost}
    port: ${RABBIT_MQ_PORT:5672}
    username: ${RABBIT_MQ_USER:guest}
    password: ${RABBIT_MQ_PASSWORD:guest}

app-config:
  services:
    sales: ${SALES_HTTP:http}://${SALES_HOST:localhost}:${SALES_PORT:8882}

  secrets:
    api-secret: ${API_SECRET:424e0edc-4ffe-4abb-aa35-788fbebc39fa-5e705d1d-89b1-4868-aade-0267b199a774--d0463d9a-ebab-4b55-af16-91c35606e20f}

  rabbit:
    exchange: product.topic
    routingKey:
      product-stock: product-stock-update.routingKey
      sales-confirmation: sales-confirmation-update.routingKey
    queue:
      product-stock: product-stock-update.queue
      sales-confirmation: sales-confirmation-update.queue